# -*- coding: utf-8 -*-
"""LLM Cross Checking Bank Statement With Proof of Funds Letters.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GTyUHS5skewd85uEba2PoCXiYzFh14KL
"""

import requests

def ocr_space_file(filename, overlay=False, api_key='eeeee', language='eng'):
    payload = {'isOverlayRequired': overlay,
               'apikey': api_key,
               'language': language,
               }
    with open(filename, 'rb') as f:
        r = requests.post('https://api.ocr.space/parse/image',
                          files={'filename': f},
                          data=payload,
                          )
    return r.json()


api_key = 'eeeee'

filename = 'original.jpeg'

result = ocr_space_file(filename, api_key=api_key)

# Process the result
if result['IsErroredOnProcessing']:
    print("Error occurred during processing.")
else:
    parsed_results = result['ParsedResults']
    for parsed_result in parsed_results:
        bankstatement_ocr = parsed_result['ParsedText']
        print("Extracted Text:")
        print(bankstatement_ocr)

import requests

def ocr_space_file(filename, overlay=True, api_key='ee', language='eng'):
    payload = {'isOverlayRequired': overlay,
               'apikey': api_key,
               'language': language,
               }
    with open(filename, 'rb') as f:
        r = requests.post('https://api.ocr.space/parse/image',
                          files={'filename': f},
                          data=payload,
                          )
    return r.json()

# Replace 'eeee' with your actual API key
api_key = 'eeeee'
# Replace 'VFS_App_Center.jpg' with the path to your image file
filename = 'not mention.png'

result = ocr_space_file(filename, api_key=api_key)
print(result)
# Process the result
if result['IsErroredOnProcessing']:
    print("Error occurred during processing.")
else:
    parsed_results = result['ParsedResults']
    for parsed_result in parsed_results:
        text = parsed_result['ParsedText']
        print("Extracted Text:")
        print(text)

#!pip install openai
from openai import OpenAI

# Initialize OpenAI client with your API key
client = OpenAI(api_key='sk-proj-eeeeee')

# Define the conversation messages
from openai import OpenAI


response = client.chat.completions.create(
  model="gpt-3.5-turbo",
  messages=[
    {
      "role": "user",
      "content": bankstatement_ocr +'''find transaction that are greater than 800 sek and cross check if there is a mention of that transaction in this text or not:
'''+ text+
'''In the reponse just write Positive if there is otherwise Negative'''
    }
  ],
  temperature=0,
  max_tokens=520,
  top_p=1,
  frequency_penalty=0,
  presence_penalty=0
)
generated_response = response.choices[0].message.content

# Print the generated response
print("Generated Response:", generated_response)

"""# Now In case of all proofs of transactions given and supporting docs are attached"""

import requests

def ocr_space_file(filename, overlay=True, api_key='K87152346488957', language='eng'):
    payload = {'isOverlayRequired': overlay,
               'apikey': api_key,
               'language': language,
               }
    with open(filename, 'rb') as f:
        r = requests.post('https://api.ocr.space/parse/image',
                          files={'filename': f},
                          data=payload,
                          )
    return r.json()

# Replace 'eee' with your actual API key
api_key = 'eeee'
# Replace 'VFS_App_Center.jpg' with the path to your image file
filename = 'mention.png'

result = ocr_space_file(filename, api_key=api_key)
print(result)
# Process the result
if result['IsErroredOnProcessing']:
    print("Error occurred during processing.")
else:
    parsed_results = result['ParsedResults']
    for parsed_result in parsed_results:
        text = parsed_result['ParsedText']
        print("Extracted Text:")
        print(text)

from openai import OpenAI

# Initialize OpenAI client with your API key
client = OpenAI(api_key='sk-proj-eeeee')

# Define the conversation messages
from openai import OpenAI


response = client.chat.completions.create(
  model="gpt-3.5-turbo",
  messages=[
    {
      "role": "user",
      "content": bankstatement_ocr +'''find transaction that are greater than 800 sek and cross check if there is a mention of that transaction in this text or not:
'''+ text+
'''In the reponse just write Positive if there is otherwise Negative'''
    }
  ],
  temperature=0,
  max_tokens=520,
  top_p=1,
  frequency_penalty=0,
  presence_penalty=0
)
generated_response = response.choices[0].message.content

# Print the generated response
print("Generated Response:", generated_response)

